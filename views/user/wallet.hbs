{{> headr}}

<style>
    body {
      background: #f8f9fa;
    }
    .wallet-balance-card {
      background: linear-gradient(to right, #4e73df, #224abe);
      color: white;
      border-radius: 1rem;
      padding: 2rem;
      text-align: center;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
    .transaction-card {
      padding: 1rem;
      border-radius: 0.75rem;
      margin-bottom: 1rem;
      border-left: 5px solid;
    }
    .credit {
      background-color: #e6f4ea;
      border-color: #28a745;
    }
    .debit {
      background-color: #fceaea;
      border-color: #dc3545;
    }
</style>
<div class="main-container">
      {{>profilesidebar}}

<div class="container my-5">
  

  <h2 class="mb-4 text-center">My Wallet</h2>

  <!-- Wallet Balance Card -->

  <div class="card text-center mb-4 shadow-sm">
    <div class="card-body">
      <h5 class="card-title">Wallet Balance</h5>
      <h1 class="display-4 text-success">₹{{user.wallet}}</h1>
    </div>
  </div>


  <!-- Action Buttons -->
 <div class="d-flex justify-content-center gap-3 mb-5">
  <button class="btn btn-primary" id="addMoneyBtn">Add Money</button>

  </div>
 {{#each walletHistory}}
 <div class="transaction-card {{this.type}}">
    <div class="d-flex justify-content-between">
      <div>
       
      
        <strong>{{this.type}}</strong> — ₹{{this.amount}}<br>
        <small>{{this.reason}}</small><br>
        <small class="text-muted">{{formatDate this.date}}</small>
      </div>
<div class="transaction-amount {{#if (eq this.type 'credit')}}text-green{{else}}text-red{{/if}}">
          {{#if (eq this.type 'credit')}}+ ₹{{this.amount}}{{else}}- ₹{{this.amount}}{{/if}}
        </div>     
    </div>
  </div>
  {{/each}}

</div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    document.getElementById('addMoneyBtn').addEventListener('click', async () => {
    const { value: amount } = await Swal.fire({
      title: 'Enter Amount',
      input: 'number',
      inputAttributes: {
        min: 1
      },
      showCancelButton: true,
      confirmButtonText: 'Add to Wallet'
    })
  

     if (amount && amount > 0) {
      $.post('/wallet/create-order', { amount }, (response) => {
        launchWalletRazorpay(response);
      }).fail((xhr) => {
        Swal.fire("Error", xhr.responseJSON?.message || "Could not create wallet order", "error");
      });
    }
  });

  function launchWalletRazorpay(orderData) {
    const options = {
      key: orderData.key,
      amount: orderData.amount,
      currency: orderData.currency,
      order_id: orderData.orderId,
      name: "Wallet Top-Up",
      handler: function (response) {
        $.post('/wallet/verify-payment', {
          razorpayPaymentId: response.razorpay_payment_id,
          razorpayOrderId: response.razorpay_order_id,
          razorpaySignature: response.razorpay_signature,
          amount: orderData.amount,
          userId: orderData.userId
        }, () => {
          Swal.fire("Success", "Wallet topped up successfully!", "success")
            .then(() => window.location.reload());
        }).fail(() => {
          Swal.fire("Failed", "Payment verification failed", "error");
        });
      }
    };

    const rzp = new Razorpay(options);
    rzp.open();
  } 

</script>