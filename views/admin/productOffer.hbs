   <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

   
   {{> admin-header}}
    <div class="main-content " id="mainContent">
<h2 class="mb-4">Offer Management</h2>
</div>
<div class="container mt-5">
  
   <form id="productOffer-form" class="border p-4 rounded">
  <h5 class="mb-3">Create Product Offer</h5>

  <!-- Custom searchable multi-select -->
  <div class="mb-3">
    <label class="form-label fw-semibold">Select Products</label>
    <div class="dropdown">
      <button class="btn btn-outline-secondary w-100 text-start" type="button" id="dropdownBtn">
        Search and select products
      </button>
      <div id="dropdownMenu" class="border p-2 mt-1 bg-white" style="display: none; max-height: 250px; overflow-y: auto;">
        <input type="text" id="productSearch" class="form-control mb-2" placeholder="Search products..." />

        <div id="productOptions">
          {{#each products}}
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="product{{@index}}" value="{{this._id}}">
            <label class="form-check-label" for="product{{@index}}">{{this.productName}}</label>
          </div>
          {{/each}}
        </div>
      </div>
    </div>
    <input type="hidden" name="products" id="selectedProducts" />
    <div class="form-text">Search and select one or more products.</div>
    <div id="error-products" class="text-danger small"></div>
  </div>

  <!-- Offer Fields -->
  <div class="mb-3">
    <label class="form-label">Offer Name</label>
    <input type="text" class="form-control" name="name" />
    <div id="error-name" class="text-danger small"></div>
  </div>

  <div class="mb-3">
    <label class="form-label">Offer Code</label>
    <input type="text" class="form-control" name="code" />
    <div id="error-code" class="text-danger small"></div>
  </div>

  <div class="mb-3">
    <label class="form-label">Discount (%)</label>
    <input type="number" class="form-control" name="discount" min="1" max="99" />
    <div id="error-discount" class="text-danger small"></div>
  </div>

  <div class="mb-3">
    <label class="form-label">Valid Until</label>
    <input type="date" class="form-control" name="validUntil" />
    <div id="error-validUntil" class="text-danger small"></div>
  </div>

  <input type="hidden" name="type" value="product" />

  <button type="submit" class="btn btn-primary">Create Product Offer</button>
</form>
</div>


<div class="container mt-5">
  <h4 class="mb-4">Product Offers</h4>

  <table class="table table-bordered table-hover">
    <thead class="table-dark">
      <tr>
    
    
        <th>Offer Name</th>
   
    
        <th>Code</th>
            <th>Target</th>
        <th>Discount (%)</th>
        <th>Valid Until</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <!-- Example rows: dynamically rendered -->
         {{#each offer}}
       {{#if (eq type "product")}}
      <tr>
    
        <td>{{offerName}}</td>

 
 <td>{{code}}</td>
        
        <td> {{#if (eq type "product")}}
            {{#each products}}
                <div>{{add @index 1}}. {{this.productName}}</div>
            {{/each}}
          {{else if (eq type "category")}}
           {{category.name}}
          {{else}}
            <span class="text-muted">Not Assigned</span>
          {{/if}}


        </td>
       
        <td>{{discount}}%</td>
        <td>{{formatDate validUntil}}
         
        </td>
<td>
  {{#if (eq status "Inactive")}}
    <span class="badge rounded-pill bg-danger">{{status}}</span>
  {{else}}
    <span class="badge rounded-pill bg-success">{{status}}</span>
  {{/if}}
</td>   
  <td>
<button type="button" class="btn btn-sm btn-warning"
  onclick="openEditModal(
    '{{_id}}',
    '{{offerName}}',
    '{{discount}}',
    '{{formatDate validUntil}}',
    '{{#each products}}{{this._id}},{{/each}}'
  )">
  Edit
</button>

  <button type="submit" class="btn btn-sm btn-danger" onclick="deleteOffer('{{_id}}')">Delete</button>

        </td>
      </tr>
      {{/if}}
      {{/each}}
     
    </tbody>
  </table>
</div>



{{!-- edit product offer module --}}




<!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1" aria-labelledby="editOfferLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <form id="editOfferForm" method="POST">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editOfferLabel">Edit Product Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <div class="modal-body">
          <input type="hidden" id="editOfferId" name="offerId">
          <div class="mb-3">
<button type="button" class="btn btn-outline-secondary" onclick="toggleDropdownEdit()">Select Products</button>
<div id="dropdownMenu_edit" class="border p-2 mt-1 bg-white" style="display: none; max-height: 250px; overflow-y: auto;">
  <input type="text" id="productSearch_edit" class="form-control mb-2" placeholder="Search products..." />
  <div id="productOptions_edit">
    {{#each products}}
      <div class="form-check">
        <input class="form-check-input" type="checkbox" name="products" id="product_edit{{@index}}" value="{{this._id}}">
        <label class="form-check-label" for="product_edit{{@index}}">{{this.productName}}</label>
      </div>
    {{/each}}
  </div>
</div>

  <div class="form-text">Hold Ctrl (Windows) or Cmd (Mac) to select multiple products.</div>
</div>


          <div class="mb-3">
            <label class="form-label">Offer Name</label>
            <input type="text" class="form-control" id="editOfferName" name="offerName" required>
          </div>

          <div class="mb-3">
            <label class="form-label">Discount (%)</label>
            <input type="number" class="form-control" id="editDiscount" name="discount" required>
          </div>

          <div class="mb-3">
            <label class="form-label">Valid Until</label>
            <input type="text" class="form-control" id="editValidUntil" name="validUntil" required>
          </div>

          <!-- Add other fields if needed -->
        </div>

        <div class="modal-footer">
          <button type="submit"  class="btn btn-success">Update</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
      </div>
    </form>
  </div>
</div>


<script>
//edit product offer 
  // Toggle dropdown in modal
function toggleDropdownEdit() {
  const menu = document.getElementById("dropdownMenu_edit");
  if (menu) {
    menu.style.display = menu.style.display === "block" ? "none" : "block";
  }
}

// Filter products in modal
const searchInputEdit = document.getElementById("productSearch_edit");
if (searchInputEdit) {
  searchInputEdit.addEventListener("input", function () {
    const value = this.value.toLowerCase();
    const options = document.querySelectorAll("#productOptions_edit .form-check");

    options.forEach(option => {
      const label = option.querySelector("label").innerText.toLowerCase();
      option.style.display = label.includes(value) ? "block" : "none";
    });
  });
}

// Update modal form on open
window.openEditModal = function (id, name, discount, validUntil, productIdsString) {
  document.getElementById("editOfferId").value = id;
  document.getElementById("editOfferName").value = name;
  document.getElementById("editDiscount").value = discount;
  document.getElementById("editValidUntil").value = validUntil;

  const checkboxes = document.querySelectorAll('#productOptions_edit input[type="checkbox"]');
  checkboxes.forEach(cb => cb.checked = false);

  const selectedIds = productIdsString.split(',').map(s => s.trim());
  checkboxes.forEach(cb => {
    if (selectedIds.includes(cb.value)) {
      cb.checked = true;
    }
  });

  const modal = new bootstrap.Modal(document.getElementById("editOfferModal"));
  modal.show();
};

 //end of edit product




    const dropdownBtn = document.getElementById("dropdownBtn");
  const dropdownMenu = document.getElementById("dropdownMenu");
  const productSearch = document.getElementById("productSearch");
  const productOptions = document.getElementById("productOptions");
  const selectedProductsInput = document.getElementById("selectedProducts");

  // Toggle dropdown
  dropdownBtn.addEventListener("click", () => {
    dropdownMenu.style.display = dropdownMenu.style.display === "block" ? "none" : "block";
  });

  // Close dropdown on outside click
  document.addEventListener("click", (e) => {
    if (!dropdownMenu.contains(e.target) && !dropdownBtn.contains(e.target)) {
      dropdownMenu.style.display = "none";
    }
  });

  // Filter products by search
  productSearch.addEventListener("keyup", () => {
    const keyword = productSearch.value.toLowerCase();
    const options = productOptions.querySelectorAll(".form-check");

    options.forEach(option => {
      const label = option.querySelector("label").innerText.toLowerCase();
      option.style.display = label.includes(keyword) ? "block" : "none";
    });
  });

  // Update selected products
  productOptions.addEventListener("change", () => {
    const selected = [];
    productOptions.querySelectorAll("input:checked").forEach(cb => {
      selected.push(cb.value);
    });
    selectedProductsInput.value = selected.join(",");
    dropdownBtn.innerText = selected.length > 0 ? `${selected.length} product(s) selected` : "Search and select products";
  });


 document.getElementById("productOffer-form").addEventListener("submit", function (e) {
  e.preventDefault();
  // Clear error
  document.getElementById("error-products").innerText = "";

  // Collect selected products
  const selected = [];
  document.querySelectorAll("#productOptions input:checked").forEach(checkbox => {
    selected.push(checkbox.value);
  });

  // Validate
  if (selected.length === 0) {
    document.getElementById("error-products").innerText = "Please select at least one product.";
    return;
  }
  // Assign to hidden input
  document.getElementById("selectedProducts").value = selected.join(",");

  // Create data object
  const form = e.target;
  const data = {
    products: selected,
    name: form.name.value,
    code: form.code.value,
    discount: form.discount.value,
    validUntil: form.validUntil.value,
    type: form.type.value
  };

  console.log(data);

  // Send to server
  fetch("/admin/offers/product", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data)
  })
  .then(res => res.json())
  .then(res => {
    if (res.success) {
      Swal.fire({
        icon: "success",
        title: "Offer Created",
        text: "Product offer created successfully!"
      }).then(() => {
        window.location.href = "/admin/offers/product";
      });
    } else if (res.errors) {
      for (const [field, message] of Object.entries(res.errors)) {
        const errorDiv = document.getElementById(`error-${field}`);
        if (errorDiv) errorDiv.innerText = message;
      }
    }
  })
  .catch(() => {
    Swal.fire({
      icon: "error",
      title: "Server Error",
      text: "Please try again later."
    });
  });
});




//edit product offer

 document.getElementById("editOfferForm").addEventListener("submit", function (e) {
  e.preventDefault();

  // Collect selected products
  const selected = [];
  document.querySelectorAll("#productOptions_edit input:checked").forEach(checkbox => {
    selected.push(checkbox.value);
  });
  console.log(selected)

  // Prepare data
  const data = {
    offerId: document.getElementById("editOfferId").value,
    offerName: document.getElementById("editOfferName").value,
    discount: document.getElementById("editDiscount").value,
    validUntil: document.getElementById("editValidUntil").value,
    products: selected,
    type: "product" // Hardcoded since this is for product offer
  };

  // Send to backend
  fetch("/admin/offers/product", { // Make sure this matches your route
    method: "PUT", // or PUT, depending on your backend route
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data)
  })
    .then(res => res.json())
    .then(res => {
      if (res.success) {
        Swal.fire({
          icon: "success",
          title: "Offer Edited",
          text: res.message || "Product offer updated successfully!"
        }).then(() => {
          window.location.reload();
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Update Failed",
          text: res.message || "Could not update offer"
        });
      }
    })
    .catch(() => {
      Swal.fire({
        icon: "error",
        title: "Server Error",
        text: "Please try again later."
      });
    });
});




function deleteOffer(offerId)
  {
     Swal.fire({
    title: 'Are you sure?',
    text: "This action cannot be undone!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, delete it!'
  }).then((result)=>{
    if(result.isConfirmed)
    {
$.ajax({
      url:`/admin/offers/${offerId}`,
      method:"DELETE",
     
      success:(result)=>{
        if(result.success)
        {
           Swal.fire('Deleted!', 'Offer has been deleted.', 'success').then(() => {
              location.reload(); // Reload page to reflect changes
            });
        }else {
            Swal.fire('Error', res.message || 'Something went wrong.', 'error');
          }

      },error: () => {
          Swal.fire('Error', 'Server error occurred.', 'error');
        }
    })
    }
  })
    
  }
</script>
{{> admin-foote}}